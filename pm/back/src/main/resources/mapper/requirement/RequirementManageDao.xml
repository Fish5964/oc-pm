<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.geeke.requirement.dao.RequirementManageDao">
  <sql id="requirementManageColumns">
    <trim suffixOverrides=",">
      a.id AS "id",
      a.project_id AS "project.id",
      IFNULL(project.project_name,'') AS "project.projectName",
      IFNULL(project.project_short_name,'') AS "project.projectShortName",
      IFNULL(project.project_code,'') AS "project.projectCode",
      a.requirement_name AS "requirementName",

      a.milestone_id AS "milestone.id",
      IFNULL(milestone.milestone_name,'') AS "milestone.milestoneName",

      a.schedule_id AS "schedule.id",
      IFNULL(schedule.schedule_name,'') AS "schedule.scheduleName",

      a.proposer AS "proposer",
      date_format(a.submission_date, '%Y-%m-%d') AS "submissionDate",
      a.requirement_desc AS "requirementDesc",
      a.file_id AS "fileId",
      a.remarks AS "remarks",
      a.create_by AS "createBy",
      a.create_date AS "createDate",
      a.update_by AS "updateBy",
      a.update_date AS "updateDate",
      a.del_flag AS "delFlag",
      a.requirement_code AS "requirementCode",
    </trim>
  </sql>
  <sql id="requirementManageJoins">
    LEFT JOIN project_list project ON project.id = a.project_id
    LEFT JOIN milestone_manage milestone ON milestone.id = a.milestone_id
    LEFT JOIN schedule_manage schedule ON schedule.id = a.schedule_id
  </sql>
  <select id="get" resultType="com.geeke.requirement.entity.RequirementManage">
    SELECT
    <include refid="requirementManageColumns" />
    FROM requirement_manage a
    <include refid="requirementManageJoins" />
    WHERE a.id = #{id}
  </select>

  <select id="getByrequires" resultType="com.geeke.requirement.entity.RequirementManage">
    SELECT
    <include refid="requirementManageColumns" />
    FROM requirement_manage a
    inner join project_list pl on a.project_id = pl.id
    <include refid="requirementManageJoins" />
    WHERE pl.project_code = #{id}
    AND a.del_flag = '0'
  </select>

  <select id="count" resultType="int">
    SELECT COUNT(*) FROM requirement_manage a
    <include refid="requirementManageJoins" />
    <where>
      1=1
      AND a.id > 0
      AND a.del_flag = #{DEL_FLAG_NORMAL}
      <include refid="Common.whereParams" />
    </where>
  </select>
  <select id="listPage" resultType="com.geeke.requirement.entity.RequirementManage">
    SELECT
    <include refid="requirementManageColumns" />
    FROM requirement_manage a
    <include refid="requirementManageJoins" />
    <where>
      1=1
      AND a.id > 0
      AND a.del_flag = #{DEL_FLAG_NORMAL}
      <include refid="Common.whereParams" />
    </where>
    <choose>
      <when test="order != null and order != ''">
        ORDER BY ${order}
      </when>
      <otherwise>
        ORDER BY a.submission_date DESC
      </otherwise>
    </choose>
    LIMIT #{limit} OFFSET #{offset}
  </select>
  <select id="listAll" resultType="com.geeke.requirement.entity.RequirementManage">
    SELECT
    <include refid="requirementManageColumns" />
    FROM requirement_manage a
    <include refid="requirementManageJoins" />
    <where>
      1=1
      AND a.id > 0
      AND a.del_flag = #{DEL_FLAG_NORMAL}
      <include refid="Common.whereParams" />
    </where>
    <choose>
      <when test="order != null and order != ''">
        ORDER BY ${order}
      </when>
      <otherwise>
        ORDER BY a.submission_date DESC
      </otherwise>
    </choose>
  </select>

  <select id="listMilestoneAll" resultType="com.geeke.projectManage.entity.MilestoneManage">
    SELECT
    a.id AS "id",
    a.milestone_name AS "milestoneName"
    FROM milestone_manage a
    LEFT JOIN project_list project ON project.id = a.project_id
    <where>
      1=1
      AND a.id > 0
      AND a.del_flag = #{DEL_FLAG_NORMAL}
      <include refid="Common.whereParams" />
    </where>
    <choose>
      <when test="order != null and order != ''">
        ORDER BY ${order}
      </when>
      <otherwise>
        ORDER BY a.sort ASC, a.create_date desc
      </otherwise>
    </choose>
  </select>

  <select id="listScheduleAll" resultType="com.geeke.projectManage.entity.ScheduleManage">
    SELECT
    a.id AS "id",
    a.schedule_name AS "scheduleName"
    FROM schedule_manage a
    LEFT JOIN milestone_manage milestone ON milestone.id = a.milestone_id
    <where>
      1=1
      AND a.id > 0
      AND a.del_flag = #{DEL_FLAG_NORMAL}
      <include refid="Common.whereParams" />
    </where>
    <choose>
      <when test="order != null and order != ''">
        ORDER BY ${order}
      </when>
      <otherwise>
        ORDER BY a.create_date DESC
      </otherwise>
    </choose>

  </select>


  <insert id="insert">
    INSERT INTO requirement_manage(
    <trim suffixOverrides=",">
      id,
      project_id,
      requirement_name,
      milestone_id,
      schedule_id,
      proposer,
      submission_date,
      requirement_desc,
      file_id,
      remarks,
      create_by,
      create_date,
      update_by,
      update_date,
      del_flag,
      requirement_code,
    </trim>
    ) VALUES (
    <trim suffixOverrides=",">
      #{ id },
      #{ project.id },
      #{ requirementName },
      #{ milestone.id },
      #{ schedule.id },
      #{ proposer },
      #{ submissionDate },
      #{ requirementDesc },
      #{ fileId },
      #{ remarks },
      #{ createBy },
      #{ createDate },
      #{ updateBy },
      #{ updateDate },
      #{ delFlag },
      #{ requirementCode },
    </trim>
    )
  </insert>
  <update id="update">
    UPDATE requirement_manage SET
    <trim suffixOverrides=",">
      project_id = #{ project.id },
      requirement_name = #{ requirementName },
      milestone_id = #{ milestone.id },
      schedule_id = #{ schedule.id },
      proposer = #{ proposer },
      submission_date = #{ submissionDate },
      requirement_desc = #{ requirementDesc },
      file_id = #{ fileId },
      remarks = #{ remarks },
      update_by = #{ updateBy },
      update_date = #{ updateDate },
    </trim>
    WHERE id = #{id}
    and update_date = #{oldUpdateDate}
  </update>
  <update id="delete">
    UPDATE requirement_manage SET
    update_by = #{updateBy},
    update_date = #{updateDate},
    del_flag = #{DEL_FLAG_DELETE}
    WHERE id = #{id}
    and update_date = #{oldUpdateDate}
  </update>
  <insert id="bulkInsert" parameterType="java.util.List">
    INSERT INTO requirement_manage(
    <trim suffixOverrides=",">
      id,
      project_id,
      requirement_name,
      milestone_id,
      schedule_id,
      proposer,
      submission_date,
      requirement_desc,
      file_id,
      remarks,
      create_by,
      create_date,
      update_by,
      update_date,
      del_flag,
      requirement_code,
    </trim>
    ) VALUES
    <foreach collection="entitys" index="index" item="entity" open="" separator="," close="">
      (
      <trim suffixOverrides=",">
        #{entity.id},
        #{entity.project.id},
        #{entity.requirementName},
        #{entity.milestone.id},
        #{entity.schedule.id},
        #{entity.proposer},
        #{entity.submissionDate},
        #{entity.requirementDesc},
        #{entity.fileId},
        #{entity.remarks},
        #{entity.createBy},
        #{entity.createDate},
        #{entity.updateBy},
        #{entity.updateDate},
        #{entity.delFlag},
        #{entity.requirementCode},
      </trim>
      )
    </foreach>
  </insert>
  <update id="bulkUpdate" parameterType="java.util.List">
    UPDATE requirement_manage
    <set>
      <trim prefix="project_id=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.project.id}
        </foreach>
      </trim>
      <trim prefix="requirement_name=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.requirementName}
        </foreach>
      </trim>
      <trim prefix="milestone_id=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.milestone.id}
        </foreach>
      </trim>
      <trim prefix="schedule_id=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.schedule.id}
        </foreach>
      </trim>
      <trim prefix="proposer=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.proposer}
        </foreach>
      </trim>
      <trim prefix="submission_date=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.submissionDate}
        </foreach>
      </trim>
      <trim prefix="requirement_desc=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.requirementDesc}
        </foreach>
      </trim>
      <trim prefix="file_id=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.fileId}
        </foreach>
      </trim>
      <trim prefix="remarks=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.remarks}
        </foreach>
      </trim>
      <trim prefix="update_by=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.updateBy}
        </foreach>
      </trim>
      <trim prefix="update_date=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.updateDate}
        </foreach>
      </trim>
    </set>
    WHERE
    <foreach collection="entitys" item="entity" index="index" separator="OR" open="(" close=")">
      id = #{entity.id} and update_date = #{entity.oldUpdateDate}
    </foreach>
  </update>
  <update id="bulkDelete" parameterType="java.util.List">
    UPDATE requirement_manage
    <set>
      <trim prefix="del_flag=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then 1
        </foreach>
      </trim>
      <trim prefix="update_by=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.updateBy}
        </foreach>
      </trim>
      <trim prefix="update_date=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.updateDate}
        </foreach>
      </trim>
    </set>
    WHERE
    <foreach collection="entitys" item="entity" index="index" separator="OR" open="(" close=")">
      id = #{entity.id} and update_date = #{entity.oldUpdateDate}
    </foreach>
  </update>
</mapper>