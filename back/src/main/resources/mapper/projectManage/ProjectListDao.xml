<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.geeke.projectManage.dao.ProjectListDao">
  <sql id="projectListColumns">
    <trim suffixOverrides=",">
      a.id AS "id",
      a.project_name AS "projectName",
      a.project_short_name AS "projectShortName",
      a.project_code AS "projectCode",
      a.project_status AS "projectStatus.id",
      a.complete_desc AS "completeDesc",
      IFNULL(projectStatus.name,'') AS "projectStatus.name",
      IFNULL(projectStatus.value,'') AS "projectStatus.value",
      IFNULL(projectStatus.dict_type_id,'') AS "projectStatus.dictTypeId",
      a.custom_id AS "custom.id",
      IFNULL(custom.name,'') AS "custom.name",
      IFNULL(custom.dict_type_id,'') AS "custom.dictTypeId",
      IFNULL(custom.value,'') AS "custom.value",
      a.department_id AS "department.id",
      IFNULL(department.name,'') AS "department.name",
      IFNULL(department.parent_id,'') AS "department.parentId",
      IFNULL(department.ids,'') AS "department.ids",
      IFNULL(department.code,'') AS "department.code",
      IFNULL(department.company_id,'') AS "department.companyId",
      a.project_type AS "projectType.id",
      IFNULL(projectType.name,'') AS "projectType.name",
      IFNULL(projectType.dict_type_id,'') AS "projectType.dictTypeId",
      IFNULL(projectType.value,'') AS "projectType.value",
      a.project_manager AS "projectManager.id",
      IFNULL(projectManager.name,'') AS "projectManager.name",
      date_format(a.plan_begin_date, '%Y-%m-%d') AS "planBeginDate",
      date_format(a.plan_end_date, '%Y-%m-%d') AS "planEndDate",
      a.apply_by AS "applyBy",
      a.apply_department_id as "applyDepartment.id",
      IFNULL(applyDepartment.name,'') AS "applyDepartment.name",
      IFNULL(applyDepartment.parent_id,'') AS "applyDepartment.parentId",
      IFNULL(applyDepartment.ids,'') AS "applyDepartment.ids",
      IFNULL(applyDepartment.code,'') AS "applyDepartment.code",
      IFNULL(applyDepartment.company_id,'') AS "applyDepartment.companyId",
      a.apply_date AS "applyDate",
      a.project_busi_opp_id AS "projectBusiOpp.id",
      IFNULL(projectBusiOpp.name,'') AS "projectBusiOpp.name",
      IFNULL(projectBusiOpp.dict_type_id,'') AS "projectBusiOpp.dictTypeId",
      IFNULL(projectBusiOpp.value,'') AS "projectBusiOpp.value",
      a.project_core_member AS "projectCoreMember",
      a.market_manager AS "marketManager",
      a.custom_name AS "customName",
      a.custom_role AS "customRole",
      a.project_budget AS "projectBudget",
      a.project_budget_person_month AS "projectBudgetPersonMonth",
      a.plan_labor_cost AS "planLaborCost",
      a.plan_person_monthly AS "planPersonMonthly",
      a.project_desc AS "projectDesc",
      a.annex AS "annex",
      a.proc_inst AS "procInst",
      a.proc_status AS "procStatus.id",
      IFNULL(procStatus.name,'') AS "procStatus.name",
      IFNULL(procStatus.dict_type_id,'') AS "procStatus.dictTypeId",
      IFNULL(procStatus.value,'') AS "procStatus.value",
      a.remarks AS "remarks",
      a.create_by AS "createBy",
      a.create_date AS "createDate",
      a.update_by AS "updateBy",
      a.update_date AS "updateDate",
      a.del_flag AS "delFlag",
      costBudget.per_invest_real as "perInvestReal",
      costBudget.per_cost_real as "perCostReal",
      (costBudget.per_invest_real + costBudget.per_cost_real + costBudget.shop_paid_real + costBudget.other_paid_real) as "totalCostReal",
    </trim>
  </sql>
  <sql id="projectListJoins">
    LEFT JOIN sys_dict_item projectStatus ON projectStatus.id = a.project_status
    LEFT JOIN sys_dict_item custom ON custom.id = a.custom_id
    LEFT JOIN org_department department ON department.id = a.department_id
    LEFT JOIN org_department applyDepartment ON applyDepartment.id = a.apply_department_id
    LEFT JOIN sys_dict_item projectType ON projectType.id = a.project_type
    LEFT JOIN sys_user projectManager ON projectManager.id = a.project_manager
    LEFT JOIN sys_dict_item projectBusiOpp ON projectBusiOpp.id = a.project_busi_opp_id
    LEFT JOIN sys_dict_item procStatus ON procStatus.id = a.proc_status
    left join (
        select
            t1.project_id as project_id,
            sum(t1.per_invest_real) as per_invest_real,
            sum(t1.per_cost_real) as per_cost_real,
            sum(t1.shop_paid_real) as shop_paid_real,
            sum(t1.other_paid_real) as other_paid_real
        from cost_budget t1
        where t1.del_flag = '0'
        group by t1.project_id
    ) costBudget on costBudget.project_id = a.id
  </sql>
  <select id="get" resultType="com.geeke.projectManage.entity.ProjectList">
    SELECT
    <include refid="projectListColumns" />
    FROM project_list a
    <include refid="projectListJoins" />
    WHERE a.id = #{id}
  </select>

  <select id="gets" resultType="com.geeke.projectManage.entity.ProjectList">
    SELECT
    a.id AS "id",
    a.project_name AS "projectName",
    a.project_short_name AS "projectShortName",
    a.project_code AS "projectCode"
    FROM project_list a inner join sys_user su on a.department_id = su.department_id
    <if test='loginName != "admin" and loginName != "system"'>
      WHERE su.login_name  = #{loginName}
    </if>
  </select>

  <select id="count" resultType="int">
    SELECT COUNT(*) FROM project_list a
    <include refid="projectListJoins" />
    <where>
      1=1
      AND a.id > 0
      AND a.del_flag = #{DEL_FLAG_NORMAL}
      <if test="extra != null and extra !=''">
        and a.project_manager = #{extra}
      </if>
      <include refid="Common.whereParams" />
    </where>
  </select>
  <select id="listPage" resultType="com.geeke.projectManage.entity.ProjectList">
    SELECT
    <include refid="projectListColumns" />
    FROM project_list a
    <include refid="projectListJoins" />
    <where>
      1=1
      AND a.id > 0
      AND a.del_flag = #{DEL_FLAG_NORMAL}
      <if test="extra != null and extra !=''">
        and a.project_manager = #{extra}
      </if>
      <include refid="Common.whereParams" />
    </where>
    <choose>
      <when test="order != null and order != ''">
        ORDER BY ${order}
      </when>
      <otherwise>
        ORDER BY a.create_date DESC
      </otherwise>
    </choose>
    LIMIT #{limit} OFFSET #{offset}
  </select>
  <select id="listAll" resultType="com.geeke.projectManage.entity.ProjectList">
    SELECT
    <include refid="projectListColumns" />
    FROM project_list a
    <include refid="projectListJoins" />
    <where>
      1=1
      AND a.id > 0
      AND a.del_flag = #{DEL_FLAG_NORMAL}
      and a.project_status in (2, 3)
      <if test="extra != null and extra !=''">
        and a.project_manager = #{extra}
      </if>
      <include refid="Common.whereParams" />
    </where>
    <choose>
      <when test="order != null and order != ''">
        ORDER BY ${order}
      </when>
      <otherwise>
        ORDER BY a.create_date DESC
      </otherwise>
    </choose>
  </select>
  <select id="listByTeamMember" resultType="com.geeke.projectManage.entity.ProjectList">
    SELECT
    <include refid="projectListColumns" />
    FROM project_list a
    <include refid="projectListJoins" />
    <where>
      1=1
      AND a.id > 0
      AND a.del_flag = #{DEL_FLAG_NORMAL}
      and a.project_status in (2, 3)
      <if test="extra != null and extra !=''">
        and exists (select 1 from team_member t1 where t1.project_id = a.id and t1.user_id = #{extra} and t1.del_flag = 0)
      </if>
      <include refid="Common.whereParams" />
    </where>
    <choose>
      <when test="order != null and order != ''">
        ORDER BY ${order}
      </when>
      <otherwise>
        ORDER BY a.create_date DESC
      </otherwise>
    </choose>
  </select>
  <insert id="insert">
    INSERT INTO project_list(
    <trim suffixOverrides=",">
      id,
      project_name,
      project_short_name,
      project_code,
      project_status,
      custom_id,
      department_id,
      project_type,
      project_manager,
      plan_begin_date,
      plan_end_date,
      apply_by,
      apply_department_id,
      apply_date,
      project_busi_opp_id,
      project_core_member,
      market_manager,
      custom_name,
      custom_role,
      project_budget,
      project_budget_person_month,
      plan_labor_cost,
      plan_person_monthly,
      project_desc,
      annex,
      proc_inst,
      proc_status,
      remarks,
      create_by,
      create_date,
      update_by,
      update_date,
      del_flag,
    </trim>
    ) VALUES (
    <trim suffixOverrides=",">
      #{ id },
      #{ projectName },
      #{ projectShortName },
      concat(#{ projectType.value }, date_format(now(), '%Y%m%d'), (select lpad(max(substring(a.project_code, 11)) + 1, 4, '0') from project_list a)),
      #{ projectStatus.id },
      #{ custom.id },
      #{ department.id },
      #{ projectType.id },
      #{ projectManager.id },
      #{ planBeginDate },
      #{ planEndDate },
      #{ applyBy },
      #{ applyDepartment.id },
      #{ applyDate },
      #{ projectBusiOpp.id },
      #{ projectCoreMember },
      #{ marketManager },
      #{ customName },
      #{ customRole },
      #{ projectBudget },
      #{ projectBudgetPersonMonth },
      #{ planLaborCost },
      #{ planPersonMonthly },
      #{ projectDesc },
      #{ annex },
      #{ procInst },
      #{ procStatus.id },
      #{ remarks },
      #{ createBy },
      #{ createDate },
      #{ updateBy },
      #{ updateDate },
      #{ delFlag },
    </trim>
    )
  </insert>
  <update id="update">
    UPDATE project_list SET
    <trim suffixOverrides=",">
      project_name = #{ projectName },
      project_short_name = #{ projectShortName },
      project_status = #{ projectStatus.id },
      custom_id = #{ custom.id },
      department_id = #{ department.id },
      project_type = #{ projectType.id },
      project_manager = #{ projectManager.id },
      plan_begin_date = #{ planBeginDate },
      plan_end_date = #{ planEndDate },
      project_busi_opp_id = #{ projectBusiOpp.id },
      project_core_member = #{ projectCoreMember },
      market_manager = #{ marketManager },
      custom_name = #{ customName },
      custom_role = #{ customRole },
      project_budget = #{ projectBudget },
      project_budget_person_month = #{ projectBudgetPersonMonth },
      plan_labor_cost = #{ planLaborCost },
      plan_person_monthly = #{ planPersonMonthly },
      project_desc = #{ projectDesc },
      annex = #{ annex },
      remarks = #{ remarks },
      update_by = #{ updateBy },
      update_date = #{ updateDate },
    </trim>
    WHERE id = #{id}
    and update_date = #{oldUpdateDate}
  </update>
  <update id="delete">
    UPDATE project_list SET
    update_by = #{updateBy},
    update_date = #{updateDate},
    del_flag = #{DEL_FLAG_DELETE}
    WHERE id = #{id}
    and update_date = #{oldUpdateDate}
  </update>
  <insert id="bulkInsert" parameterType="java.util.List">
    INSERT INTO project_list(
    <trim suffixOverrides=",">
      id,
      project_name,
      project_short_name,
      project_code,
      project_status,
      custom_id,
      department_id,
      project_type,
      project_manager,
      plan_begin_date,
      plan_end_date,
      apply_by,
      apply_department_id,
      apply_date,
      project_busi_opp_id,
      project_core_member,
      market_manager,
      custom_name,
      custom_role,
      project_budget,
      project_budget_person_month,
      plan_labor_cost,
      plan_person_monthly,
      project_desc,
      annex,
      proc_inst,
      proc_status,
      remarks,
      create_by,
      create_date,
      update_by,
      update_date,
      del_flag,
    </trim>
    ) VALUES
    <foreach collection="entitys" index="index" item="entity" open="" separator="," close="">
      (
      <trim suffixOverrides=",">
        #{entity.id},
        #{entity.projectName},
        #{entity.projectShortName},
        #{entity.projectCode},
        #{entity.projectStatus.id},
        #{entity.custom.id},
        #{entity.department.id},
        #{entity.projectType.id},
        #{entity.projectManager.id},
        #{entity.planBeginDate},
        #{entity.planEndDate},
        #{entity.applyBy},
        #{entity.applyDepartment.id},
        #{entity.applyDate},
        #{entity.projectBusiOpp.id},
        #{entity.projectCoreMember},
        #{entity.marketManager},
        #{entity.customName},
        #{entity.customRole},
        #{entity.projectBudget},
        #{entity.projectBudgetPersonMonth},
        #{entity.planLaborCost},
        #{entity.planPersonMonthly},
        #{entity.projectDesc},
        #{entity.annex},
        #{entity.procInst},
        #{entity.procStatus.id},
        #{entity.remarks},
        #{entity.createBy},
        #{entity.createDate},
        #{entity.updateBy},
        #{entity.updateDate},
        #{entity.delFlag},
      </trim>
      )
    </foreach>
  </insert>
  <update id="bulkUpdate" parameterType="java.util.List">
    UPDATE project_list
    <set>
      <trim prefix="project_name=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.projectName}
        </foreach>
      </trim>
      <trim prefix="project_short_name=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.projectShortName}
        </foreach>
      </trim>
      <trim prefix="project_code=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.projectCode}
        </foreach>
      </trim>
      <trim prefix="project_status=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.projectStatus.id}
        </foreach>
      </trim>
      <trim prefix="custom_id=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.custom.id}
        </foreach>
      </trim>
      <trim prefix="department_id=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.department.id}
        </foreach>
      </trim>
      <trim prefix="project_type=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.projectType.id}
        </foreach>
      </trim>
      <trim prefix="project_manager=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.projectManager.id}
        </foreach>
      </trim>
      <trim prefix="plan_begin_date=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.planBeginDate}
        </foreach>
      </trim>
      <trim prefix="plan_end_date=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.planEndDate}
        </foreach>
      </trim>
      <trim prefix="apply_by=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.applyBy}
        </foreach>
      </trim>
      <trim prefix="apply_department_id=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.applyDepartment.id}
        </foreach>
      </trim>
      <trim prefix="apply_date=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.applyDate}
        </foreach>
      </trim>
      <trim prefix="project_busi_opp_id=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.projectBusiOpp.id}
        </foreach>
      </trim>
      <trim prefix="project_core_member=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.projectCoreMember}
        </foreach>
      </trim>
      <trim prefix="market_manager=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.marketManager}
        </foreach>
      </trim>
      <trim prefix="custom_name=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.customName}
        </foreach>
      </trim>
      <trim prefix="custom_role=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.customRole}
        </foreach>
      </trim>
      <trim prefix="project_budget=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.projectBudget}
        </foreach>
      </trim>
      <trim prefix="project_budget_person_month=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.projectBudgetPersonMonth}
        </foreach>
      </trim>
      <trim prefix="plan_labor_cost=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.planLaborCost}
        </foreach>
      </trim>
      <trim prefix="plan_person_monthly=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.planPersonMonthly}
        </foreach>
      </trim>
      <trim prefix="project_desc=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.projectDesc}
        </foreach>
      </trim>
      <trim prefix="annex=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.annex}
        </foreach>
      </trim>
      <trim prefix="proc_inst=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.procInst}
        </foreach>
      </trim>
      <trim prefix="proc_status=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.procStatus.id}
        </foreach>
      </trim>
      <trim prefix="remarks=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.remarks}
        </foreach>
      </trim>
      <trim prefix="update_by=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.updateBy}
        </foreach>
      </trim>
      <trim prefix="update_date=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.updateDate}
        </foreach>
      </trim>
    </set>
    WHERE
    <foreach collection="entitys" item="entity" index="index" separator="OR" open="(" close=")">
      id = #{entity.id} and update_date = #{entity.oldUpdateDate}
    </foreach>
  </update>
  <update id="bulkDelete" parameterType="java.util.List">
    UPDATE project_list
    <set>
      <trim prefix="del_flag=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then 1
        </foreach>
      </trim>
      <trim prefix="update_by=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.updateBy}
        </foreach>
      </trim>
      <trim prefix="update_date=case" suffix="end,">
        <foreach collection="entitys" item="entity" index="index">
          when id=#{entity.id} then #{entity.updateDate}
        </foreach>
      </trim>
    </set>
    WHERE
    <foreach collection="entitys" item="entity" index="index" separator="OR" open="(" close=")">
      id = #{entity.id} and update_date = #{entity.oldUpdateDate}
    </foreach>
  </update>
  <update id="updateProjectStatusById">
    update project_list
    set project_status = #{projectStatus.id}
    where id = #{id}
  </update>
  <update id="saveProjectCompleted">
    update project_list
    set real_begin_date = #{realBeginDate},
        real_end_date = #{realEndDate},
        complete_desc = #{completeDesc},
        complete_annex = #{completeAnnex},
        project_status = 4,
        update_by = #{updateBy},
        update_date = #{updateDate}
    where id = #{id}
  </update>

  <select id="listMap" resultType="com.geeke.projectManage.entity.ProjectList">
    SELECT
    <include refid="projectListColumns" />
    FROM project_list a
    <include refid="projectListJoins" />
    <where>
      1=1
      AND a.id > 0
      AND a.del_flag = #{DEL_FLAG_NORMAL}
      <if test="extra != null and extra !=''">
        and a.project_manager = #{extra}
      </if>
      <include refid="Common.whereParams" />
    </where>
    <choose>
      <when test="order != null and order != ''">
        ORDER BY ${order}
      </when>
      <otherwise>
        ORDER BY a.create_date DESC
      </otherwise>
    </choose>
  </select>


</mapper>
